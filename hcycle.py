import subprocess

import click
import yaml

import paths
from api_utils.site_controller import SiteController
from cycle_helpers.cycle_calls import call_cycles

from utils.gwctl_manager import GWCTLManager


@click.group()
def cli():
    click.echo("Halio Cycle Tester Version: 0.1.0")


@cli.command()
@click.option("-env", is_flag=False, flag_value="stage", default="stage",
              type=click.Choice(['stage', 'prod'], case_sensitive=False), help='Which environment is the site in?')
@click.option('-s', '--site', required=True, help='Site name: must be exact. Get from console.')
@click.option('-gr', '--group', required=True, help='Group name: must be exact. Get from console.')
@click.option('-cy', '--cycles', required=True, type=int, help='Number of cycles')
@click.option('-cp', "--cycle-period", required=True, type=float, help='Cycle length in minutes')
@click.option('-cr', '--check-rate', type=int, default=30, help='How often to pull device info during cycles')
@click.option('-em', '--energy-manager', is_flag=True, default=False, help='FLAG; Include energy manager data: off by default')
@click.option('-rnd', '--random', is_flag=True, default=False, help='FLAG; Randomize tint levels: each cycle will have a random value for target tint.')
@click.option('-sl', '--start-level', default=0, type=int, help="Pick the tint level for the first cycle.")
@click.option('-f', '--file', default=None, type=str, help='Name for csv file generated by the test')
@click.option('--debug', is_flag=True, default=False, help='FLAG; Used by the debugger. WARNING: Don\'t use outside of a development environment. You won\'t like the results.')
@click.option('-wts', '--wait-to-start', type=int, default=0, help='Start the cycles after a wait: in seconds')
def cycle_test(env,
               site,
               group,
               cycles,
               cycle_period,
               check_rate,
               energy_manager,
               random,
               start_level,
               file,
               debug,
               wait_to_start):
    """
    \b
    This is the main hcycle command.
    This is the most basic way to trigger a command.
    There are easier ways to start a cycle test, but this is a good place to start.
    Coming soon: Saving the test to run again.

    Command Format:
    hcycle cycle-test -env [environment] -s [site name] -gr [group name] -cy [number of cycles] -cp [length of cycles] -cr
    [check rate] -f [file name for data] -sl [start tint level] -wts [wait before cycle start] FLAGS: -em, -rnd, --debug


    Command Example: hcycle cycle-test -env stage -s "GlareControlTestSLC" -gr "Test Group: DR-200 HP" -cy 10 -cp 10 -cr
    20 -rnd -f "SqueekerCab_EM_test_20221020_full.csv" -wts 10 --debug
    """
    call_cycles(env=env,
                site=site,
                group=group,
                cycles=cycles,
                cycle_period=cycle_period,
                check_rate=check_rate,
                energy_manager=energy_manager,
                rand=random,
                start_level=start_level,
                file=file,
                debug=debug,
                wait_to_start=wait_to_start)


@cli.command()
@click.option('-st', "--stored_test", required=True, type=str, help="File name with set test variables")
@click.option('-wts', '--wait-to-start', default=0, help="Delay the cycle test. In seconds.")
def run_ctest(stored_test, wait_to_start):
    """
    Runs a file with stored test values. Easier than running the cycle-test command.
    File must be stored in yaml format.

    \b
    YAML File Example:
    ---
    name: "Testname"
    environment: stage
    site: "Site name"
    group: "Group name"
    cycles: 10
    cycle-period: 5
    check-rate: 15
    energy-manager: True
    rand: False
    \b
    Command Format:
        hcycle run-ctest -st [file name] -wts [delay to start]
    \b
    Command Examples:
        hcycle run-ctest -st STRESS_squeekers_ct.yaml
        hcycle run-ctest -st squeekers_cycle_test
    """
    if ".yaml" not in stored_test:
        stored_test = stored_test + ".yaml"
    file = open(paths.get_paths(f"cycle_tests\\{stored_test}"), "r")
    yaml_set = yaml.safe_load(file)
    if "name" in yaml_set.keys():
        click.echo(yaml_set["name"])
    click.echo(f"Running cycles in: {yaml_set['environment']}\n"
               f"Site:{yaml_set['site']}\n"
               f"Group: {yaml_set['group']}\n"
               f"Cycles: {yaml_set['cycles']}\n"
               f"Cycle Length: {yaml_set['cycle-period']} minutes\n"
               f"Check devices every {yaml_set['check-rate']} seconds\n")
    call_cycles(env=yaml_set['environment'],
                site=yaml_set['site'],
                group=yaml_set['group'],
                cycles=yaml_set['cycles'],
                cycle_period=yaml_set['cycle-period'],
                check_rate=yaml_set['check-rate'],
                energy_manager=yaml_set["energy-manager"],
                rand=yaml_set["rand"],
                start_level=yaml_set["start-level"],
                file=None,
                debug=False,
                wait_to_start=wait_to_start)


@cli.command()
@click.option('-gid', '--gateway_id', required=True, help='gateway hardware id')
@click.option('-sid', '--site_id', required=True, help='site id')
@click.option('-fn', '--file_name', required=True, help='file name')
def gen_config(gateway_id, site_id, file_name):
    """Generates a config file for the gwctl tool."""
    gwctl_manager = GWCTLManager({}, site_id)
    if ".json" not in file_name:
        file_name = file_name + ".json"
    gwctl_manager.generate_config(gateway_id, site_id, file_name)
    click.echo(file_name)


@cli.command()
@click.option("-env", is_flag=False, flag_value="stage", default="stage",
              type=click.Choice(['stage', 'prod'], case_sensitive=False))
@click.option('-s', '--site', required=True)
@click.option('-gr', '--group', required=True)
def group_info(env, site, group):
    site_controller = SiteController(env, site)
    r = site_controller.get_live_tint_data_for_group(group)
    click.echo(r)


@cli.command()
@click.option('-env', is_flag=False, flag_value="stage", default="stage",
              type=click.Choice(['stage', 'prod'], case_sensitive=False))
@click.option('-s', '--site', required=True)
def site_device_list(env, site):
    site_controller = SiteController(env, site)
    drivers = site_controller.build_driver_map()



def get_cal_values():
    site_controller = SiteController("stage", "GlareControlTestSLC")
    drivers = site_controller.build_driver_map()
    def command(driver):
        c = f".\gwctl-1.1.0.exe --config .\squeeker_cabinet_GlareControl.json node requestFirmwareUpdate {driver}"
        print(subprocess.check_output(c))
    for driver, ids in drivers.items():
        command(ids["driverHardwareId"])

@cli.command()
def thing_on():
    get_cal_values()